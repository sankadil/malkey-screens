<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600" xmlns:code="http://code.google.com/p/flexlib/"
			   creationComplete="application1_creationCompleteHandler(event)"
			    width="889"
				title="Reservation Diary"
				 height="512">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:DateFormatter id="df" formatString="YYYY/MM/DD"/>
		
		<fx:XML format="e4x" id="cmenu">
			<root>
				<menuitem label="View Reservation"/>
				<menuitem label="Check-Out"/>
				<menuitem label="Check-In"/>
			</root>
		</fx:XML>
		
		<fx:XML format="e4x" id="myMenuData">
			<root>
				<menuitem label="Rental" >
					<menuitem label="New Reservation"/>
					<menuitem label="Check-Out"/>
					<menuitem label="Check-In"/>
				</menuitem>
				<menuitem label="Administration">
					<menuitem label="Vehicle"/>
					<menuitem label="Maintenance"/>
					<menuitem label="To-Do"/>
				</menuitem>
			</root>
		</fx:XML>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.events.SelectionEvent;
			
			import flexlib.scheduling.*;
			import flexlib.scheduling.samples.ScheduleData;
			import flexlib.scheduling.scheduleClasses.BackgroundItem;
			import flexlib.scheduling.scheduleClasses.ColoredScheduleEntry;
			import flexlib.scheduling.scheduleClasses.LayoutScrollEvent;
			import flexlib.scheduling.scheduleClasses.SimpleScheduleEntry;
			import flexlib.scheduling.scheduleClasses.lineRenderer.ILineRenderer;
			import flexlib.scheduling.util.DateUtil;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.controls.Menu;
			import mx.core.IFlexDisplayObject;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.MenuEvent;
			import mx.events.ScrollEvent;
			import mx.events.ScrollEventDirection;
			import mx.managers.PopUpManager;
			
			[Bindable]
			private var StartDate:Date;
			[Bindable]
			private var EndDate:Date;
			
			[Bindable]
			private var resData:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var dataProvider:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var rowProvider:IList = new ArrayCollection();
			
			[Bindable]
			private var conMenu:ArrayCollection = new ArrayCollection([
				{des:"View Reservation"},
				{des:"Check-Out"},
				{des:"Check-In"}
			]);

			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				//StartDate = new Date(2011,0,1,null,null,null,null);
				//EndDate = new Date(2011,2,1,null,null,null,null);
				initResData();
				initDataProvider();
				txtDate.selectedDate = new Date();
				setTimeFrame(txtDate.selectedDate);
				//initContextMenu();
			}
			
			/* private function initContextMenu():void
			{
				try
				{
					var cm:ContextMenu = new ContextMenu();
					cm.hideBuiltInItems();
					for(var a:int=0;a<conMenu.length;a++)
					{
						var o:Object = conMenu.getItemAt(a);
						var myItem:ContextMenuItem = new ContextMenuItem(o["des"].toString(),false,true,true);
						myItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,contextMenuHandler,false,0,false);
						//MovieClip(systemManager).contextMenu.customItems.push(myItem);
						cm.customItems.push(myItem);
					}
					MovieClip(systemManager).contextMenu = cm;
				}
				catch(error:Error)
				{
					Alert.show("initContextMenu: " + error.message);
				}
			}  */
			
			protected function contextMenuHandler(event:ContextMenuEvent):void
			{
				Alert.show("And handler invoked.","Context Menu clicked...");
			}
			
			private function initResData():void
			{
				try
				{
					for(var a:int=0;a<5;a++)
					{
						var row:ArrayCollection = new ArrayCollection();
						
						var o:Object;
						var date:Date = new Date();
						
						o = new Object();
						o["refno"] = "RF00001";
						o["startDate"] = df.format(date.toString());
						o["hours"] = "24";
						o["status"] = getStatus();
						row.addItem(o);
						
						date.setHours(72);
						o = new Object();
						o["refno"] = "RF00002";
						o["startDate"] = df.format(date.toString());
						o["hours"] = 72;
						o["status"] = getStatus();
						row.addItem(o);
						
						date.setHours(144);
						o = new Object();
						o["refno"] = "RF00003";
						o["startDate"] = df.format(date.toString());
						o["hours"] = 24;
						o["status"] = getStatus();
						row.addItem(o);
						
						date.setHours(72);
						o = new Object();
						o["refno"] = "RF00004";
						o["startDate"] = df.format(date.toString());
						o["hours"] = 35;
						o["status"] = getStatus();
						row.addItem(o);
						
						resData.addItem(row);
					}
				}
				catch(error:Error)
				{
					Alert.show("initResData: " + error.message);
				}
			}
			
			private function getStatus():String
			{
				var num:int = Math.floor(Math.random() * 2) + 1;
				var str:String;
				switch(num)
				{
					case 1:
						return "1"; //reserved
						break;
					case 2:
						str = "2"; //checked-out
						break;
				}
				return str;
			}
			
			/* private function initDataProvider() : void
			{
				try
				{
					dataProvider.removeAll();
					rowProvider.removeAll();
					var o:Object;
					
					var entries:ArrayCollection = new ArrayCollection();
					var entry:SimpleScheduleEntry = new SimpleScheduleEntry();
					entry.startDate = DateUtil.clearTime( new Date() );
					entry.endDate = new Date( entry.startDate.getTime() + DateUtil.HOUR_IN_MILLISECONDS * 300 );
					entry.label = "Our first entry!";					
					entries.addItem( entry );
					o = new Object();
					o["label"] = "Our first entry!";
					rowProvider.addItem(o);
					
					entry = new SimpleScheduleEntry();
					entry.startDate = DateUtil.setTime( new Date(), DateUtil.HOUR_IN_MILLISECONDS );
					entry.endDate = new Date( entry.startDate.getTime() + DateUtil.HOUR_IN_MILLISECONDS * 500 );
					entry.label = "Our second entry!";
					entries.addItem( entry );
					o = new Object();
					o["label"] = "Our second entry!";
					rowProvider.addItem(o);
					
					entry = new SimpleScheduleEntry();
					entry.startDate = DateUtil.setTime( new Date(), DateUtil.HOUR_IN_MILLISECONDS * 13 );
					entry.endDate = new Date( entry.startDate.getTime() + DateUtil.HOUR_IN_MILLISECONDS * 750);
					entry.label = "Our third entry!";
					entries.addItem( entry );
					o = new Object();
					o["label"] = "Our third entry!";
					rowProvider.addItem(o);
					
					
					 entry = new SimpleScheduleEntry();
					entry.startDate = DateUtil.clearTime( new Date() );
					entry.endDate = DateUtil.clearTime( new Date(2011,1,22,null,null,null,null) );
					entry.label = "Our fourth entry!";
					entries.addItem( entry );  
					
					entry = new SimpleScheduleEntry();
					entry.startDate =  DateUtil.clearTime(new Date());
					entry.endDate = new Date( entry.startDate.getTime() + DateUtil.HOUR_IN_MILLISECONDS * 24);
					entry.label = "Our fouth entry!";
					entries.addItem( entry );
					o = new Object();
					o["label"] = "Our fourth entry!";
					rowProvider.addItem(o);

					dataProvider = entries;
				}
				catch(error:Error)
				{
					Alert.show(error.message);
				}
			}  */
				

			/* private function initDataProvider() : void
			{
				try
				{
					dataProvider = new ScheduleData().createRandomColoredScheduleEntries(100);
					var results:ArrayCollection = new ArrayCollection();
					var entries:ArrayCollection = new ArrayCollection();
					var o:Object;
					
					
					for(var a:int=1;a<=20;a++)
					{
						var entry:SimpleScheduleEntry = new SimpleScheduleEntry(); 
						entry.startDate = DateUtil.clearTime( new Date() );
						entry.endDate = new Date( entry.startDate.getTime() + DateUtil.HOUR_IN_MILLISECONDS * 24);
						entry.label = "Ref No: RN00000" + a.toString();
						entries.addItem(entry);
						o = new Object();
						o["label"] = "Row " + a.toString();
						rowProvider.addItem(o);
						
						var bi:BackgroundItem = new BackgroundItem();
						bi.color = 0xEEEDE9;
						bi.description = entry.label;
						bi.startDate = entry.startDate;
						bi.endDate = entry.endDate;
						results.addItem(bi);
					}			
					scheduleViewer.backgroundItems = results;
					dataProvider = entries; 
					dataProvider.refresh();
				}
				catch(error:Error)
				{
					Alert.show(error.message);
				}
			}  */
			
			private function initDataProvider() : void
			{
				try
				{
					dataProvider.removeAll();
					var entries : ArrayCollection = new ArrayCollection();
					var o:Object;
					
					
					for(var a:int=0;a<resData.length;a++)
					{
						var row : IList = new ArrayCollection();
						o = new Object();
						o["label"] = "KD-000" + (a+1).toString();
						rowProvider.addItem(o);
						
						var resAC:ArrayCollection = resData.getItemAt(a) as ArrayCollection;
						for(var b:int=0;b<resAC.length;b++)
						{
							var ro:Object = resAC.getItemAt(b);
							var refno:String = ro["refno"].toString();
							var ar:Array = ro["startDate"].toString().split("/");
							var dt:Date = new Date(ar[0].toString(),int(ar[1].toString())-1,ar[2].toString(),0,0,0,0);
							var hours:int = int(ro["hours"].toString());
							var status:String = ro["status"].toString();

							//Alert.show("d: " + d.toString() + "   dt: " + dt.toString());
							
							//var entry:SimpleScheduleEntry = new SimpleScheduleEntry();
							var entry:ColoredScheduleEntry = new ColoredScheduleEntry();
							entry.startDate = DateUtil.clearTime(dt);
							entry.endDate = new Date(entry.startDate.getTime() + DateUtil.HOUR_IN_MILLISECONDS * hours);
							entry.label = refno;
							if(status=="1")
							{
								entry.backgroundColor = 0xfa9b13;
								entry.label += " - Reserved";
							}
							else if(status=="2")
							{
								entry.backgroundColor = 0x8afa13;
								entry.label += " - Checked-out";
							}
							row.addItem(entry);
						}
						entries.addItem(row); 
					}
					
						
						
					/* 	var dt1:Date = new Date(2011,0,22,0,0,0,0);
						var row : IList = new ArrayCollection();
						var entry : SimpleScheduleEntry;
						
						entry = new SimpleScheduleEntry();
						entry.startDate = DateUtil.clearTime(dt1);
						entry.endDate = new Date( entry.startDate.getTime() + DateUtil.HOUR_IN_MILLISECONDS * 24 );
						entry.label = "Our second entry!";
						row.addItem( entry );
						

						var dt2:Date = new Date(2011,0,25,0,0,0,0);
						entry = new SimpleScheduleEntry();
						entry.startDate = DateUtil.clearTime(dt2);
						entry.endDate = new Date( entry.startDate.getTime() + DateUtil.HOUR_IN_MILLISECONDS * 24 );
						entry.label = "Overlapping";
						row.addItem( entry );     
						entries.addItem( row );
						
						entries.addItem(row); */
						//Alert.show("row: " + row.length.toString());
					//}	 
					dataProvider = entries; 
					dataProvider.refresh(); 
				}
				catch(error:Error)
				{
					Alert.show("initDataProvider: " + error.message);
				}
			} 

			protected function sl_changeHandler(event:Event):void
			{
				//zoomViewer();
			}
			
			private function zoomViewer():void
			{
				scheduleViewer.zoom = 200;
				timeline.zoom = 200;
			}


			protected function timeline_scrollHandler(event:ScrollEvent):void
			{
				 scheduleViewer.xPosition = event.position; 
			}


			protected function scheduleViewer_scrollHandler(event:ScrollEvent):void
			{
				if(event.direction==ScrollEventDirection.VERTICAL)
				{
					scrollRowList(event.position);
				}
			}


			protected function scheduleViewer_pixelScrollHandler(event:LayoutScrollEvent):void
			{
				if(event.direction==ScrollEventDirection.VERTICAL)
				{
					scrollRowList(event.position);
				}
			}
		
			protected function scheduleViewer_itemScrollHandler(event:LayoutScrollEvent):void
			{
				scrollRowList(event.position);
			}
			
			private function scrollRowList(position:Number):void
			{
				rowList.verticalScrollPosition = position;
			}

			protected function scheduleViewer_clickHandler(event:MouseEvent):void
			{
				try
				{
					if(scheduleViewer.selectedItem!=null)
					{
						var se:SimpleScheduleEntry = scheduleViewer.selectedItem as SimpleScheduleEntry;
						scheduleViewer.selectedItem = null;
						//Alert.show(se.label.toString());
						createAndShow(event.stageX,event.stageY);
					}
				}
				catch(error:Error)
				{
					Alert.show(error.message);
				}
			}
			
			private var myMenu:Menu; 
			
			private function createAndShow(x:Number,y:Number):void 
			{
				myMenu = Menu.createMenu(null, cmenu, false);
				myMenu.addEventListener(MenuEvent.ITEM_CLICK,menuItemClick,false,0,false);
				myMenu.labelField="@label";
				myMenu.show(x, y);
			}
			
			private function menuItemClick(e:MenuEvent):void
			{
				var obj:IFlexDisplayObject;
				switch(e.label.toString())
				{
					case "View Reservation":
						obj = new Reservation();
						break;	
					case "Check-Out":
						obj = new Reservation();
						break;
					case "Check-In":
						obj = new Reservation();
						break;
				}
				showPopup(obj);
			}
			
			private function showPopup(obj:IFlexDisplayObject):void
			{
				PopUpManager.addPopUp(obj,this,true,null,null);
				PopUpManager.centerPopUp(obj);
			}

			protected function txtDate_changeHandler(event:CalendarLayoutChangeEvent):void
			{
				setTimeFrame(txtDate.selectedDate);
			}
			
			private function setTimeFrame(sd:Date):void
			{
				try
				{
					var dt:Date = new Date(sd.getFullYear(),sd.getMonth(),sd.getDate(),null,null,null,null);
					StartDate = DateUtil.clearTime(dt);
					dt.setHours(dt.getHours() + 720);
					EndDate = DateUtil.clearTime(dt);				
					zoomViewer();
					timeline.xPosition = 0;
					scheduleViewer.xPosition = 0;
					dataProvider.refresh();
				}
				catch(error:Error)
				{
					Alert.show("setTimeFrame: " + error.message);
				}
			}


			protected function titlewindow1_closeHandler(event:CloseEvent):void
			{
				PopUpManager.removePopUp(this);
			}


			protected function button1_clickHandler(event:MouseEvent):void
			{
				showMenu(event.stageX,event.stageY);
			}
			
			private function showMenu(x:Number,y:Number):void 
			{
				myMenu = Menu.createMenu(null, myMenuData, false);
				myMenu.addEventListener(MenuEvent.ITEM_CLICK,mainMenuItemClick,false,0,false);
				myMenu.labelField="@label";
				myMenu.show(x,y);
			}
			
			
			private function mainMenuItemClick(e:MenuEvent):void
			{
				var obj:IFlexDisplayObject;
				switch(e.label.toString())
				{	
					case "New Reservation":
						obj = new Reservation();
						break;
					case "Check-Out":
						obj = new Reservation();
						break;
					case "Check-In":
						obj = new Reservation();
						break;
					case "Vehicle":
/* 						obj = new Vehicle(); */
						break;
					case "Maintenance":
						obj = new Maintenance();
						break;
					case "To-Do":
						obj = new ToDo();
						break;
				}
				showPopup(obj);
			}

		]]>
	</fx:Script>
	
		
	
	<mx:HBox horizontalScrollPolicy="off" verticalScrollPolicy="off" horizontalGap="0" x="11" y="36" height="438">
	<mx:VBox verticalGap="20" width="70">
	<s:Label/>
	<mx:List id="rowList"
			 dataProvider="{rowProvider}"
			 rowHeight="{scheduleViewer.rowHeight}"
			 width="70" 
			 height="{scheduleViewer.height}"
			 verticalScrollPolicy="off"
			 horizontalScrollPolicy="off"/>
	</mx:VBox>
		
		
	<mx:VBox verticalGap="0" height="438" width="798">
	
	<code:Timeline id="timeline"
				   width="{scheduleViewer.width}" 
				   startDate="{StartDate}"
				   endDate="{EndDate}" 
				   xPosition="{scheduleViewer.xPosition}"
				   scroll="timeline_scrollHandler(event)"
				   minimumTimeRangeWidth="72"
				   verticalScrollPolicy="off"
				   height="32"
				   />
	
	<code:ScheduleViewer id="scheduleViewer"
							   width="795" height="400"
							   rowHeight="45"
							   dataProvider="{dataProvider}"
							   contentWidth="35"
							   startDate="{ StartDate }" endDate="{ EndDate }"
							   verticalScrollPolicy="on"
							   horizontalScrollPolicy="off"
							   scroll="scheduleViewer_scrollHandler(event)"
							   pixelScrollEnabled="false"
							   pixelScroll="scheduleViewer_pixelScrollHandler(event)"
							   itemScroll="scheduleViewer_itemScrollHandler(event)"
							   click="scheduleViewer_clickHandler(event)"
							   
							   entryRenderer="flexlib.scheduling.scheduleClasses.renderers.ColoredSolidScheduleEntryRenderer" 
							   entryLayout="flexlib.scheduling.scheduleClasses.layout.SimpleLayout"
							   />
		<!--entryRenderer="flexlib.scheduling.scheduleClasses.renderers.SolidScheduleEntryRenderer" -->
		
	</mx:VBox>
	</mx:HBox>		
	<mx:FormItem label="Date" x="104" y="7">
	<mx:DateField 
		x="8" 
		y="3" 
		width="175" 
		showToday="true" 
		id="txtDate" 
		enabled="true" 
		change="txtDate_changeHandler(event)"/>
	</mx:FormItem>
	<mx:FormItem label="Vehicle Type" x="333" y="7">
	<s:DropDownList
		x="8" 
		y="3" 
		width="124"/>
	</mx:FormItem>
	<mx:FormItem label="Model" x="553" y="7" width="264">
	<s:DropDownList
		x="8" 
		y="3" 
		width="210"/>
	</mx:FormItem>
	<mx:LinkButton x="816" y="8" color="#0A33BB" label="View"/>
	<s:Button id="btnMenu" click="button1_clickHandler(event)" x="11" y="9" label="Menu" width="56"/>
	
	<!--<code:ScheduleViewer
		id="MyScheduleViewer" 
		width="600" 
		height="100"
		rowHeight="25"
		startDate="{StartDate}"
		endDate="{ EndDate }"
		color="#FFFFFF"
		borderColor="#FFFFFF"  />-->
</s:Panel>
