<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   close="closeForm()"
			   creationComplete="initApp()"
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="422" height="185" title="Change Password" currentState="Default" xmlns:text="org.hamcrest.text.*" xmlns:services="com.dspl.malkey.services.*" xmlns:flexunit="org.flexunit.*" xmlns:utils="com.dspl.malkey.components.common.utils.*" >
	<fx:Script>
		<![CDATA[
			import com.adobe.crypto.MD5;
			import com.adobe.utils.ErrorTipManager;
			import com.adobe.utils.StringUtil;
			import com.dspl.efinac.components.common.controls._tiMasterFile;
			import com.dspl.malkey.util.Message;
			import com.dspl.malkey.util.Session;
			import com.dspl.malkey.valueObjects.Com_dspl_malkey_domain_Fpass;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			import mx.validators.Validator;
			
			import spark.events.TextOperationEvent;
			
			include "com/dspl/malkey/util/IPermission.as";
			public var gsTransCode:String;
			
			[Bindable]
			public static var maxLength:int;
			[Bindable]
			public var lpuPopup:_tiMasterFile = new _tiMasterFile();
			
			private var fp:Com_dspl_malkey_domain_Fpass;
			
			private function closeForm():void{
				removeFormErrorTips();
				this.parent.parent.removeChild(this.parent);
			}
			
			private function errorCloseHandler(event:Event):void{
				closeForm();
			}
			
			private function loadErrorHandler(event:Event):void{
				setState("Default");
			}
			
			private function initApp():void{
				registerValidators();
				maxLength=UserManagement.maxLength;
			}
			
			public var gsCurTabName:String="";
			public function parentTabChangedHandler(event:DataEvent):void{
				if(gsCurTabName==event.data)
					updateErrorTipVisibility();
			}
			
			public function updateErrorTipVisibility():void{
				if(currentState=="Reset"){								
					ErrorTipManager.showErrorTip(svCurPass.source);
					ErrorTipManager.showErrorTip(svNewPass.source);
					ErrorTipManager.showErrorTip(svConPass.source);
				}
			}
			
			private function removeFormErrorTips():void{				
				ErrorTipManager.removeErrorTip(svCurPass.source,true);
				ErrorTipManager.removeErrorTip(svNewPass.source,true);
				ErrorTipManager.removeErrorTip(svConPass.source,true);
			} 
			
			private function registerValidators():void{
				ErrorTipManager.registerValidator(svCurPass);
				ErrorTipManager.registerValidator(svNewPass);
				ErrorTipManager.registerValidator(svConPass);
			}

			//Display Popup Window 
			private function showPopUp(acDataProvider:ArrayCollection,strKeyColumn:String,strKeyColCaption:String,strDetailColumn:String,strDetailColCaption:String,strWindowTitle:String,eventName:String,eventListener:Function,useCloseEvent:Boolean=false,otherColumns:String="",otherColumnHeaders:String="",otherColumnWidth:int=180):void{
				lpuPopup._acDataProvider = acDataProvider;								
				lpuPopup._strKeyColumn = strKeyColumn;
				lpuPopup._strKeyColCaption = strKeyColCaption; 
				lpuPopup._strDetailColumn = strDetailColumn;
				lpuPopup._strDetailColCaption = strDetailColCaption;
				lpuPopup.otherColumns=otherColumns;
				lpuPopup.otherColumnHeaderText=otherColumnHeaders;
				lpuPopup.dgColWidth=otherColumnWidth;
				lpuPopup._strWindowTitle = strWindowTitle;			
				lpuPopup._sPostEventToRunPopUpExit = eventName;
				lpuPopup.addEventListener(eventName,eventListener,false,0,false);
				lpuPopup.launchSearchGrid(); 
				lpuPopup.isPopUp=true;
			}	

			protected function btnReset_clickHandler(event:MouseEvent):void{
				try{
					var session:Session=Session.getInstance();
					var fpass:Com_dspl_malkey_domain_Fpass=session.getAttribute("user") as Com_dspl_malkey_domain_Fpass;
					crFindByIdFpass.token=srvFpass.findById(fpass.username);
				}catch(error:Error){
					Message.displayAlert(1,"Error Occured: " + error.message,"Error",loadErrorHandler);
				}
			}

			protected function btnSave_clickHandler(event:MouseEvent):void{
				if(validateForm()==true){
					updatePassword();
				}
			}
			
			private function updatePassword():void{
				try{	
					fp.password=MD5.hash(mx.utils.StringUtil.trim(txtNewPass.text)).substr(0,maxLength);
					if(currentState=="Reset")
						updateResult.token = srvFpass.update(fp);
				}catch(error:Error){
					Message.displayAlert(1,"updatePassword: " + error.message,"Error",loadErrorHandler);
				}
			}
			
			private function validateForm():Boolean{
				try{
					txtCurPass.errorString="";
					txtNewPass.errorString="";
					txtConPass.errorString="";
					
					var validators:Array=new Array();
					validators.push(svCurPass,svNewPass,svConPass);
					
					var validationArray:Array=Validator.validateAll(validators);
					
					if(validationArray.length>0)
						return false;
					else{
						if(fp.password!=MD5.hash(mx.utils.StringUtil.trim(txtCurPass.text)).substr(0,maxLength)){
							txtCurPass.errorString="Invalid Current Password";
							updateErrorTipVisibility();
							return false;
						}
						
						if(txtNewPass.text!=txtConPass.text){
							txtConPass.errorString = "Password Mismatch";
							updateErrorTipVisibility();
							return false;
						}
						return true;
					}
				}catch(error:Error){
					Message.displayAlert(1,"validateForm: " + error.message,"Error",null);
				}
				return false;
			}


			protected function btnUndo_clickHandler(event:MouseEvent):void{
				setState("Default");
			}
			
			private function setState(state:String):void
			{
				if(state=="Default"){
					ErrorTipManager.hideAllErrorTips();
					resetControls();
				}
				currentState = state;
			}
			
			private function resetControls():void{
				txtCurPass.text="";
				txtCurPass.errorString="";
				txtNewPass.text="";
				txtNewPass.errorString="";
				txtConPass.text="";
				txtConPass.errorString="";
			}
			
			protected function crFindByIdFpass_resultHandler(event:ResultEvent):void{
				try{
					if(event.result==null){
						Message.displayAlert(1,"Find By Id [Result]: Error Occured","Error",loadErrorHandler);
					}else{
						fp=event.result as Com_dspl_malkey_domain_Fpass;
						setState("Reset");
					}
				}catch(error:Error){
					Message.displayAlert(1,"Find By Id [Error]: " + error.message,"Error",loadErrorHandler);
				}
			}
			
			protected function crFindByIdFpass_faultHandler(event:FaultEvent):void{
				Message.displayAlert(1,"FindById [Fault]: " + event.fault.toString(),"Error",loadErrorHandler);
			}
			
			private function findIndex(ac:ArrayCollection,keyfield:String,keyvalue:String):int{
				var obj:Object = null;
				try{
					for(var a:int=0;a<ac.length;a++){
						var o:Object = ac.getItemAt(a);
						if(o[keyfield]==keyvalue)
							return a;
					}
				}
				catch(error:Error){
					obj = null;
					//Message.displayAlert(1,"findIndex: " + error.message,"Error");
				}
				return -1;
			}
			
			private function FindItem(ac:ArrayCollection,keyfield:String,keyvalue:String):Object
			{
				var obj:Object = null;
				try{
					for(var a:int=0;a<ac.length;a++){
						var o:Object = ac.getItemAt(a);
						if(o[keyfield]==keyvalue)
							return o;
					}
				}catch(er:Error){
					obj = null;
					Alert.show("FindItem: " + er.message);
				}
				return obj;
			}
			
			private function enableControls():void{
				txtCurPass.enabled=true;
				txtNewPass.enabled=true;
				txtConPass.enabled=true;
			}
			
			private function successfulCloseHandler(e:Event):void{
				resetControls();
				setState("Default");
			}

			protected function updateResult_resultHandler(event:ResultEvent):void{
				if(event.result.toString()=="true"){
					Message.displayAlert(3,"Update Successful","Successful",successfulCloseHandler);
				}else{
					Message.displayAlert(1,"Error Occured Whlie Updating Password","Error",null);
				}
			}

			protected function updateResult_faultHandler(event:FaultEvent):void{
				Message.displayAlert(1,"Error Occured While Updating Password: " + event.fault.toString(),"Error",null);
			}
			
			protected function controlbar1_creationCompleteHandler(event:FlexEvent):void{
				setPermission();
			}

			protected function btnClose_clickHandler(event:MouseEvent):void{
				closeForm();
			}

		]]>
	</fx:Script>
	<s:states>
		<s:State name="Default"/>
		<s:State name="Reset"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
		<mx:StringValidator 
			id="svCurPass" 
			source="{txtCurPass}"
			property="text"
			triggerEvent=""
			/>
		
		<mx:StringValidator 
			id="svNewPass" 
			source="{txtNewPass}"
			property="text"
			triggerEvent=""
			/>
		
		<mx:StringValidator 
			id="svConPass" 
			source="{txtConPass}"
			property="text"
			triggerEvent=""
			/>

		<s:CallResponder id="crFindByIdFpass"
						 result="crFindByIdFpass_resultHandler(event)"
						 fault="crFindByIdFpass_faultHandler(event)"
						 />
		
		<services:FpassSRV
			endpoint="@Resource(key='url',bundle='resource')"
			id="srvFpass" 
			fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" showBusyCursor="true"/>
		<s:CallResponder id="updateResult"
						 result="updateResult_resultHandler(event)"
						 fault="updateResult_faultHandler(event)"
						 />
	</fx:Declarations>
	
	<mx:ControlBar x="0" y="0" horizontalGap="2" height="57" width="698" creationComplete="controlbar1_creationCompleteHandler(event)">
		<mx:Button  id="btnChange" width="40" height="40" 
					toolTip="Change Password" 
					click="btnReset_clickHandler(event)"
					disabledIcon="@Embed(source='com/dspl/malkey/components/common/icons/resetd.png')"
					icon="@Embed(source='com/dspl/malkey/components/common/icons/reset.png')" 
					enabled="false" 
					enabled.Reset="false"/>
		<mx:Button  id="btnUndo" width="40" height="40" 
					toolTip="Undo"
					click="btnUndo_clickHandler(event)"
					disabledIcon="@Embed(source='com/dspl/malkey/components/common/icons/undoD.png')" 
					icon="@Embed(source='com/dspl/malkey/components/common/icons/undo.png')" 
					enabled="false" enabled.Reset="true"/>
		<mx:Button  id="btnSave" width="40" height="40" 
					toolTip="Save"
					disabledIcon="@Embed(source='com/dspl/malkey/components/common/icons/filesaveD.png')"  
					icon="@Embed(source='com/dspl/malkey/components/common/icons/filesave.png')"  
					enabled="false"
					click="btnSave_clickHandler(event)" enabled.Reset="true"/>
		<mx:Button  id="btnClose" width="40" height="40" 
					toolTip="Close"
					disabledIcon="@Embed(source='com/dspl/malkey/components/common/icons/exitD.png')"
					icon="@Embed(source='com/dspl/malkey/components/common/icons/exit.png')"
					enabled="true"
					click="btnClose_clickHandler(event)"
					/>
	</mx:ControlBar>
	<mx:Form x="10" y="50">
		<mx:FormItem label="Current Password" fontWeight="bold" required="true">
			<s:TextInput width="250" displayAsPassword="true" maxChars="{maxLength}" enabled="false" id="txtCurPass" fontWeight="normal" enabled.Reset="true"/>
		</mx:FormItem>
		<mx:FormItem label="New Password" fontWeight="bold" required="true">
			<s:TextInput width="250" displayAsPassword="true" maxChars="{maxLength}" enabled="false" id="txtNewPass" fontWeight="normal" enabled.Reset="true"/>
		</mx:FormItem>
		<mx:FormItem label="Confirm Password" fontWeight="bold" required="true">
			<s:TextInput width="250" displayAsPassword="true" maxChars="{maxLength}" enabled="false" id="txtConPass" fontWeight="normal" enabled.Reset="true"/>
		</mx:FormItem>
	</mx:Form>
	<mx:HRule x="0" y="61" width="420"/>
</s:TitleWindow>
