<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="696" height="516"
			   title="Company Profile"
			   creationComplete="initApp(event)"
			   close="closeForm()"
			   xmlns:controls="com.adobe.flex.extras.controls.*" currentState="Default" xmlns:services="com.dspl.malkey.services.*">
	
	<fx:Declarations>
		<!--Formatters [Start]-->
		<mx:DateFormatter 
			id="dfFormatter" 
			formatString="@Resource(key='dateFormat',bundle='resource')"
			/>
		
		<mx:NumberFormatter 
			id="nfFormatter"
			precision="2"
			decimalSeparatorFrom="."
			decimalSeparatorTo="."
			/>
		<!--Formatters [End]-->
		
		<!--Validators [Start]-->
				
		<mx:StringValidator
			id="svCompany"
			source="{ddCompany}"							
			property="selectedItem"							
			triggerEvent=""
			/>
		
		<mx:StringValidator
			id="svHireType"
			source="{ddHireType}"							
			property="selectedItem"							
			triggerEvent=""
			/>
		
		<mx:StringValidator 
			id="svTaxCombination"
			source="{ddTaxCombination}"
			property="selectedItem"
			triggerEvent=""
			/>
	
		<!--Validators [End]-->
		
		<!--Service-->
		<services:FcompanySRV
			id="srvFcompany"
			endpoint="@Resource(key='url',bundle='resource')"
			/>
		<!--Call Responder-->
		<s:CallResponder
			id="crFcompanyListAll"
			result="crFcompanyListAll_resultHandler(event)"
			fault="crFcompanyListAll_faultHandler(event)"
			/>
		
		<!--Service-->
		<services:FhiretypeSRV
			id="srvFhiretype"
			endpoint="@Resource(key='url',bundle='resource')"
			/>
		<!--Call Responder-->
		<s:CallResponder
			id="crFhiretypeListAll"
			result="crFhiretype_resultHandler(event)"
			fault="crFhiretype_faultHandler(event)"
			/>
		
		<!--Service-->
		<services:FtaxhedSRV
			id="srvFtaxhed"
			endpoint="@Resource(key='url',bundle='resource')"
			/>
		<!--Call Responder-->
		<s:CallResponder
			id="crFtaxhedListAll"
			result="crFtaxhedListAll_resultHandler(event)"
			fault="crFtaxhedListAll_faultHandler(event)"
			/>
		
		<!--Service-->
		<services:FcompanytaxSRV
			id="srvFcompanytax"
			endpoint="@Resource(key='url',bundle='resource')"
			/>
		<!--Call Responder-->
		<s:CallResponder
			id="crFcompanytaxListAll"
			result="crFcompanytaxListAll_resultHandler(event)"
			fault="crFcompanytaxListAll_faultHandler(event)"
			/>
		<!--Call Responder-->
		<s:CallResponder
			id="crFcompanytaxUpdate"
			result="crFcompanytaxUpdate_resultHandler(event)"
			fault="crFcompanytaxUpdate_faultHandler(event)"
			/>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.utils.ErrorTipManager;
			import com.dspl.efinac.components.common.controls._tiMasterFile;
			import com.dspl.malkey.util.ImageBrowser;
			import com.dspl.malkey.util.Message;
			import com.dspl.malkey.valueObjects.Com_dspl_malkey_domain_Fcompanytax;
			import com.dspl.malkey.valueObjects.Com_dspl_malkey_domain_FcompanytaxPK;
			import com.dspl.malkey.valueObjects.Com_dspl_malkey_domain_Fdriverrate;
			import com.dspl.malkey.valueObjects.Com_dspl_malkey_domain_FdriverratePK;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.graphics.codec.JPEGEncoder;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ArrayUtil;
			import mx.utils.StringUtil;
			import mx.validators.Validator;
			
			include "com/dspl/malkey/util/IPermission.as";
			public var gsTransCode:String="";
			
			//Properties & Variables [Start]
			[Bindable]
			public var lpuPopup:_tiMasterFile = new _tiMasterFile();
			private var imgLoader:ImageBrowser=new ImageBrowser();
			
			[Bindable]
			private var lacTaxes:ArrayCollection = new ArrayCollection();

			//******** RESULT AND FAULT HADLERS [START]		
			protected function crFcompanyListAll_resultHandler(event:ResultEvent):void{
				try{
					if(event.result==null)
						Message.displayAlert(1,"Error Loading Company Details [Error]","Error",errorCloseHandler);
				}catch(error:Error){
					Message.displayAlert(1,"Company Details [Result]: " + error.message,"Error",errorCloseHandler);
				}
			}
			
			protected function crFcompanyListAll_faultHandler(event:FaultEvent):void{
				Message.displayAlert(1,"Company Details [Fault]: " + event.fault.toString(),"Error",errorCloseHandler);
			}
			
 			protected function crFhiretype_resultHandler(event:ResultEvent):void{
				try{
					if(event.result==null)
						Message.displayAlert(1,"Error Loading Hire Types [Error]","Error",errorCloseHandler);
				}catch(error:Error){
					Message.displayAlert(1,"Hire Types [Result]: " + error.message,"Error",errorCloseHandler);
				}
			}
			
			protected function crFhiretype_faultHandler(event:FaultEvent):void{
				Message.displayAlert(1,"Hire Types [Fault]: " + event.fault.toString(),"Error",errorCloseHandler);
			} 
			
			protected function crFtaxhedListAll_resultHandler(event:ResultEvent):void{
				try{
					if(event.result==null)
						Message.displayAlert(1,"Error Loading Tax Combinations [Error]","Error",errorCloseHandler);
				}catch(error:Error){
					Message.displayAlert(1,"Tax Combinations [Result]: " + error.message,"Error",errorCloseHandler);
				}
			}
			
			protected function crFtaxhedListAll_faultHandler(event:FaultEvent):void{
				Message.displayAlert(1,"Tax Combinations [Fault]: " + event.fault.toString(),"Error",errorCloseHandler);
			}
			
			protected function crFcompanytaxListAll_resultHandler(event:ResultEvent):void{
				try{
					if(event.result==null)
						Message.displayAlert(1,"Error Loading Company Tax Details [Error]","Error",loadErrorHandler);
					else{
						lacTaxes.removeAll();
						var obj:Object;
						var o:Object;
						var tmpAC:ArrayCollection=event.result as ArrayCollection;
						for(var a:int=0;a<tmpAC.length;a++){
							o=tmpAC.getItemAt(a);
							obj=new Object();
					 		obj["companyid"]=o["id"]["companyid"].toString();
							obj["hiretypeid"]=o["id"]["hiretypeid"].toString();
							obj["company"]=o["company"].toString();
							obj["hiretype"]=o["hiretype"].toString(); 
							obj["taxcomcode"]=o["taxcomcode"].toString(); 
							obj["taxcombination"]=o["taxcombination"].toString(); 
							lacTaxes.addItem(obj);
							if(o!=null || o["adduser"]!=null)
								setModifiedByDet(o["adduser"].toString());
						}
						tmpAC=null;
						crFcompanytaxListAll.token=null;
						lacTaxes.refresh();
					}
				}catch(error:Error){
					Message.displayAlert(1,"Company Tax Details [Result]: " + error.message,"Error",loadErrorHandler);
				}
			}
			
			protected function crFcompanytaxListAll_faultHandler(event:FaultEvent):void{
				Message.displayAlert(1,"Company Tax Details List All [Fault]: " + event.fault.toString(),"Error",errorCloseHandler);
			}
			
			protected function crFcompanytaxUpdate_resultHandler(event:ResultEvent):void{
				if(StringUtil.trim(event.result.toString()).length==0)
					displaySaveError();
				else{
					crFcompanytaxUpdate.token=null;
					Message.displayAlert(3,"Update Successful","",successfulCloseHandler);
				}
			}
			
			protected function crFcompanytaxUpdate_faultHandler(event:FaultEvent):void{
				Message.displayAlert(1,"Company Tax Detials Update [Fault]: " + event.fault.toString(),"Error",null);
			}
			
			//******** RESULT AND FAULT HADLERS [END]
			
			//******** CONTROL BUTTONS CLICK HANDLERS [START]
			protected function btnEdit_clickHandler(event:MouseEvent):void{
				setState("Edit");
			}
						
			protected function btnUndo_clickHandler(event:MouseEvent):void{
				undoForm();
			}
			
			protected function btnPrint_clickHandler(event:MouseEvent):void{
				// TODO Auto-generated method stub
			}
			
			protected function btnReload_clickHandler(event:MouseEvent):void{
				loadMasterFiles();
			}
			
			protected function btnSave_clickHandler(event:MouseEvent):void{
				if(validateForm()==true)
					save();
			}
			//******** CONTROL BUTTONS CLICK HANDLERS [END]		
			
			private function initApp(event:FlexEvent):void{
				try{
					registerValidators();
					loadMasterFiles();
				}catch(error:Error){
					Message.displayAlert(1,"initApp: " + error.message,"Error",errorCloseHandler);
				}
			}
			
			public var gsCurTabName:String="";
			public function parentTabChangedHandler(event:DataEvent):void{
				if(gsCurTabName==event.data)
					updateErrorTipVisibility();
			}
			
			public function updateErrorTipVisibility():void{
				if(currentState=="Edit"){								
					ErrorTipManager.showErrorTip(svCompany.source);
					ErrorTipManager.showErrorTip(svHireType.source);
					ErrorTipManager.showErrorTip(svTaxCombination.source);
				}
			}
			
			private function removeFormErrorTips():void{				
				ErrorTipManager.removeErrorTip(svCompany.source,true);
				ErrorTipManager.removeErrorTip(svHireType.source,true);
				ErrorTipManager.removeErrorTip(svTaxCombination.source,true);
			} 
			
			private function registerValidators():void{
				ErrorTipManager.registerValidator(svCompany);
				ErrorTipManager.registerValidator(svHireType);
				ErrorTipManager.registerValidator(svTaxCombination);
			}
			
			private function save():void{
				try{				
					var fcompanytaxes:ArrayCollection=new ArrayCollection();
					var fcompanytax:Com_dspl_malkey_domain_Fcompanytax;
					var fcompanytaxPK:Com_dspl_malkey_domain_FcompanytaxPK;
					var o:Object;
					for(var a:int=0;a<lacTaxes.length;a++){
						o=lacTaxes.getItemAt(a);
						fcompanytax=new Com_dspl_malkey_domain_Fcompanytax();
						fcompanytaxPK=new Com_dspl_malkey_domain_FcompanytaxPK();
						fcompanytaxPK.companyid=o["companyid"].toString();
						fcompanytaxPK.hiretypeid=o["hiretypeid"].toString();
						fcompanytax.id=fcompanytaxPK;
						fcompanytax.company=o["company"].toString();
						fcompanytax.hiretype=o["hiretype"].toString();
						fcompanytax.taxcomcode=o["taxcomcode"].toString();
						fcompanytax.taxcombination=o["taxcombination"].toString();
						fcompanytaxes.addItem(fcompanytax);
					}
					crFcompanytaxUpdate.token=srvFcompanytax.update(fcompanytaxes);
				}catch(error:Error){
					Alert.show("save: " + error.message);
					displaySaveError();
				}
			}
			
			private function validateForm():Boolean{
				try{				
					if(lacTaxes.length<=0){
						Message.displayAlert(2,"Define Tax Details To Continue","Warning");
						updateErrorTipVisibility();
						return false;
					}
					return true;
				}catch(error:Error){
					Message.displayAlert(1,"validateForm: " + error.message,"Error",null);
				}
				return false;
			}
			
			private function displaySaveError():void{
				var type:String;
				if(currentState=="Add")
					type="Saving";
				else if(currentState=="Edit")
					type="Updating";
				if(currentState=="Delete")
					type="Deleting";
				Message.displayAlert(1,"Error Occured While "+ type +". Please Try Again","Error",null);
			}
			
			private function loadMasterFiles():void{
				try{
					crFcompanyListAll.token=srvFcompany.ListAll();
					crFhiretypeListAll.token=srvFhiretype.ListAll();
					crFtaxhedListAll.token=srvFtaxhed.listAll();
					if(currentState=="Default")
						loadCompanyTaxes();
				}catch(error:Error){
					Message.displayAlert(1,"loadMasterFiles: " + error.message,"Error",errorCloseHandler);
				}
			}
			
			private function loadCompanyTaxes():void{
				try{
					crFcompanytaxListAll.token=srvFcompanytax.ListAll();
				}catch(error:Error){
					Message.displayAlert(1,"loadCompanyTaxes: " + error.message,"Error",errorCloseHandler);
				}
			}
			
			//Set Application State
			private function setState(state:String=""):void{
				if(state=="Default"){
					ErrorTipManager.hideAllErrorTips();
					setModifiedByDet("");
				}
				if(state=="Add"){
					setModifiedByDet("N/A");
				}else if(state=="Edit"){
					
				}else if(state=="Delete"){
					
				}else if(state=="Find"){
					
				}else if(state=="Print"){
					
				} 
				currentState = state;
			}
			
			private function setModifiedByDet(val:String):void{
				lblModifiedBy.text="Last Modified By: ";
				lblModifiedBy.text+=val;
			}
			
			private function errorCloseHandler(event:Event):void{
				closeForm();
			}
			
			private function successfulCloseHandler(event:Event):void{
				loadMasterFiles();
				undoForm();
			}
			
			private function loadErrorHandler(event:Event):void{
				undoForm();
			}
			
			private function closeForm():void{
				removeFormErrorTips();
				this.parent.parent.removeChild(this.parent);
			}
			
			//Display Popup Window 
			private function showPopUp(acDataProvider:ArrayCollection,strKeyColumn:String,strKeyColCaption:String,strDetailColumn:String,strDetailColCaption:String,strWindowTitle:String,eventName:String,eventListener:Function,useCloseEvent:Boolean=false,otherColumns:String="",otherColumnHeaders:String="",otherColumnWidth:int=180):void
			{
				lpuPopup._acDataProvider = acDataProvider;								
				lpuPopup._strKeyColumn = strKeyColumn;
				lpuPopup._strKeyColCaption = strKeyColCaption; 
				lpuPopup._strDetailColumn = strDetailColumn;
				lpuPopup._strDetailColCaption = strDetailColCaption;
				lpuPopup.otherColumns=otherColumns;
				lpuPopup.otherColumnHeaderText=otherColumnHeaders;
				lpuPopup.dgColWidth=otherColumnWidth;
				lpuPopup._strWindowTitle = strWindowTitle;			
				lpuPopup._sPostEventToRunPopUpExit = eventName;
				lpuPopup.addEventListener(eventName,eventListener,false,0,false);
				lpuPopup.launchSearchGrid(); 
				lpuPopup.isPopUp=true;
			}
			
			private function undoForm():void
			{
				try{
					//Rate Details 
					ddCompany.selectedIndex=-1;
					ddCompany.errorString="";
					ddHireType.selectedIndex=-1;
					ddHireType.errorString="";
					ddTaxCombination.selectedIndex=-1;
					ddTaxCombination.errorString="";
					btnAdd.label="Add";
					//lacRates.removeAll();
					loadCompanyTaxes();
		
					setState("Default");
				}
				catch(error:Error){
					Message.displayAlert(1,"undoForm: " + error.message,"Error",errorCloseHandler);
				}
			}

			//******** Add/Update,Delete,Cancel Button Click Handlers [Start]
			private var lbTaxEditMode:Boolean=false;
			private var liSelIndex:int=-1;
			protected function btnAdd_clickHandler(event:MouseEvent):void{
				if(validateRates()==true){
					addRate();
				}
			}
			
			private function addRate():void{
				try{
					/* var companyid:String=ddCompany.selectedItem.companyid;
					var company:String=ddCompany.selectedItem.description;
					var hiretypeid:String=ddHireType.selectedItem.hiretypeid;
					var hiretype:String=ddHireType.selectedItem.description;
					var taxcomcode:String=ddTaxCombination.selectedItem.taxcomcode;
					var taxcombination:String=ddTaxCombination.selectedItem.taxcomname; */
					
					var obj:Object=new Object();
					obj["companyid"]=ddCompany.selectedItem.companyid;
					obj["company"]=ddCompany.selectedItem.description; 
					obj["hiretypeid"]=ddHireType.selectedItem.hiretypeid;
					obj["hiretype"]=ddHireType.selectedItem.description;
					obj["taxcomcode"]=ddTaxCombination.selectedItem.taxcomcode;
					obj["taxcombination"]=ddTaxCombination.selectedItem.taxcomname;
					
					if(lbTaxEditMode==false)
						lacTaxes.addItem(obj);
					else{
						lacTaxes.removeItemAt(liSelIndex);
						lacTaxes.addItemAt(obj,liSelIndex);
						setRateEditMode(false);
					}
					lacTaxes.refresh();
				}catch(error:Error){
					Message.displayAlert(1,"Error Occured While Adding Taxes. Details: " + error.message,"Error",null);
				}
			}
			
			private function setRateEditMode(val:Boolean):void{
				lbTaxEditMode=val;
				btnDel.enabled=val;
				btnCancel.enabled=val;
				if(val==false){
					btnAdd.label="Add";
					liSelIndex=-1;
				}else{
					btnAdd.label="Update";
					liSelIndex=dgRates.selectedIndex;
					ddCompany.selectedIndex=findIndex(crFcompanyListAll.lastResult,"companyid",lacTaxes.getItemAt(liSelIndex).companyid);
					ddHireType.selectedIndex=findIndex(crFhiretypeListAll.lastResult,"hiretypeid",lacTaxes.getItemAt(liSelIndex).hiretypeid);
					ddTaxCombination.selectedIndex=findIndex(crFtaxhedListAll.lastResult,"taxcomcode",lacTaxes.getItemAt(liSelIndex).taxcomcode); 
				}
			}
			
			private function validateRates():Boolean{
				try{
					ddCompany.errorString="";
					ddHireType.errorString="";
					ddTaxCombination.errorString="";
					
					var validationArray:Array=Validator.validateAll([svCompany,svHireType,svTaxCombination]);
					if(validationArray.length>0)
						return false;
					
					var companyid:String=ddCompany.selectedItem.companyid;
					var hiretypeid:String=ddHireType.selectedItem.hiretypeid;
					var taxcomcode:String=ddTaxCombination.selectedItem.taxcomcode;
					for(var a:int=0;a<lacTaxes.length;a++){
						if(lbTaxEditMode==false){
							if(lacTaxes.getItemAt(a).companyid==companyid && lacTaxes.getItemAt(a).hiretypeid==hiretypeid){
								Message.displayAlert(2,"Taxes For Company & Hire Type Combination Is Already Assigned","Warning",null);
								return false;
							}
						}else{
							if(lacTaxes.getItemAt(a).companyid==companyid && lacTaxes.getItemAt(a).hiretypeid==hiretypeid && a!=liSelIndex){
								Message.displayAlert(2,"Taxes For Company & Hire Type Combination Is Already Assigned","Warning",null);
								return false;
							}
						}						
					}
					return true;
				}catch(error:Error){
					Message.displayAlert(1,"validateRates: " + error.message,"Error",null);
				}
				return false;
			}				

			protected function btnDel_clickHandler(event:MouseEvent):void{
				deleteRate();
			}
			
			private function deleteRate():void{
				lacTaxes.removeItemAt(liSelIndex);
				setRateEditMode(false);
			}

			protected function btnCancel_clickHandler(event:MouseEvent):void{
				setRateEditMode(false);
			}
			
			protected function dgRates_itemClickHandler(event:ListEvent):void{
				if(currentState=="Add" || currentState=="Edit")
					setRateEditMode(true);
			}
			//******** Add/Update,Delete,Cancel Buttons/ Data Grid Item Click Handlers [End]

			private function findIndex(ac:ArrayCollection,keyfield:String,keyvalue:String):int{
				var obj:Object = null;
				try{
					for(var a:int=0;a<ac.length;a++){
						var o:Object = ac.getItemAt(a);
						if(o[keyfield]==keyvalue)
							return a;
					}
				}catch(error:Error){
					obj = null;
					//Message.displayAlert(1,"findIndex: " + error.message,"Error");
				}
				return -1;
			}

			protected function controlbar1_creationCompleteHandler(event:FlexEvent):void{
				setPermission();
			}

			protected function btnClose_clickHandler(event:MouseEvent):void{
				closeForm();
			}

		]]>
	</fx:Script>
	<s:states>
		<s:State name="Default"/>
		<s:State name="Edit"/>
	</s:states>
	
	<mx:ControlBar x="3" y="-6" horizontalGap="2" height="57" width="651" creationComplete="controlbar1_creationCompleteHandler(event)">
		<mx:Button  id="btnUpdate" width="40" height="40"
					toolTip="Update" 
					disabledIcon="@Embed(source='com/dspl/malkey/components/common/icons/editD.png')"
					icon="@Embed(source='com/dspl/malkey/components/common/icons/edit.png')"
					click="btnEdit_clickHandler(event)"
					enabled.Default="false"
					enabled.Edit="false"
					/>
		<mx:Button  id="btnUndo" width="40" height="40" 
					toolTip="Undo"
					disabledIcon="@Embed(source='com/dspl/malkey/components/common/icons/undoD.png')"
					icon="@Embed(source='com/dspl/malkey/components/common/icons/undo.png')" 
					enabled.Default="false"
					enabled.Edit="true"
					click="btnUndo_clickHandler(event)"
 					/>
		<!--<mx:Button  id="btnPrint" width="40" height="40" 
					toolTip="Print"
					disabledIcon="@Embed(source='com/dspl/malkey/components/common/icons/fileprintD.png')"
					icon="@Embed(source='com/dspl/malkey/components/common/icons/fileprint.png')" 
					enabled.Default="false"
					enabled.Edit="false"
					click="btnPrint_clickHandler(event)"
					/>-->
		<mx:Button  id="btnReload" width="40" height="40"
					disabledIcon="@Embed(source='com/dspl/malkey/components/common/icons/reloadD.png')"
					icon="@Embed(source='com/dspl/malkey/components/common/icons/reload.png')" 
					toolTip="Reload"
					enabled.Default="false"
					enabled.Edit="true"
					click="btnReload_clickHandler(event)"
		/>
		<mx:Button  id="btnSave" width="40" height="40" 
					toolTip="Save"
					disabledIcon="@Embed(source='com/dspl/malkey/components/common/icons/filesaveD.png')"
					icon="@Embed(source='com/dspl/malkey/components/common/icons/filesave.png')" 
					enabled.Default="false"
					enabled.Edit="true"
					click="btnSave_clickHandler(event)"
					/>
		<mx:Button  id="btnClose" width="40" height="40" 
					toolTip="Close"
					disabledIcon="@Embed(source='com/dspl/malkey/components/common/icons/exitD.png')"
					icon="@Embed(source='com/dspl/malkey/components/common/icons/exit.png')"
					enabled="true"
					click="btnClose_clickHandler(event)"
					/>
	</mx:ControlBar>
	<mx:HRule x="0" y="44" width="694"/>
	<s:Label x="10" y="465" text="Last Modified By:" id="lblModifiedBy"/>
	<mx:Form height="403"
			 borderAlpha="0.10"
			 paddingTop="5"
			 paddingLeft="5"
			 paddingRight="5"
			 paddingBottom="2"
			 borderColor="black"
			 borderStyle="solid"
			 borderVisible="true" 
			 width="673" x="10" y="54">
		<s:Label text="Rate Details" fontWeight="bold"/>
		<mx:HBox>
			<mx:FormItem required="true" label="Company" direction="horizontal">
				<s:DropDownList
					dataProvider="{crFcompanyListAll.lastResult}"
					labelField="description"
					id="ddCompany" enabled="false" enabled.Edit="true" width="265"></s:DropDownList>
			</mx:FormItem>
			<mx:FormItem required="true" label="Hire Type" direction="horizontal">
				<s:DropDownList
					dataProvider="{crFhiretypeListAll.lastResult}"
					labelField="description"
					id="ddHireType" enabled="false" enabled.Edit="true" width="146"></s:DropDownList>
			</mx:FormItem>
		</mx:HBox>
		<mx:FormItem label="Tax Combination" direction="horizontal" required="true">
			<s:DropDownList
				dataProvider="{crFtaxhedListAll.lastResult}"
				labelField="taxcomname"
				id="ddTaxCombination" 
				enabled="false" enabled.Edit="true" width="150"/>
		</mx:FormItem>
		<mx:HBox>
			<s:Button
				click="btnAdd_clickHandler(event)"
				id="btnAdd"
				label="Add"
				enabled="false"
				width="65"
			 enabled.Edit="true"/>
			<s:Button
				click="btnDel_clickHandler(event)"
				id="btnDel"
				label="Delete"
				enabled="false"
				width="65"
				enabled.Edit="false"/>
			<s:Button
				click="btnCancel_clickHandler(event)"
				id="btnCancel"
				label="Cancel"
				enabled="false"
				width="65"
				enabled.Edit="false"/>
		</mx:HBox>
		<mx:DataGrid
			itemClick="dgRates_itemClickHandler(event)"
			id="dgRates"
			dataProvider="{lacTaxes}"
			height="289" 
			enabled="false" 
			width="652" 
			enabled.Edit="true" 
>
			<mx:columns>
				<mx:DataGridColumn headerText="Company" dataField="company" resizable="false" sortable="false" width="225"/>
				<mx:DataGridColumn headerText="Hire Type" dataField="hiretype" resizable="false" sortable="false" width="125"/>
				<mx:DataGridColumn headerText="Tax Combination" dataField="taxcombination" resizable="false" sortable="false" width="125"/>
			</mx:columns>
		</mx:DataGrid>
	</mx:Form>
</s:TitleWindow>
