<?xml version="1.0" encoding="utf-8"?>

<!--
Project: 	malkey-screens	
File:		CheckOut.mxml	
Date:		Jun 1, 2011	
Author:		Sanka Senavirathna-Administrator
-->

<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:valueObjects="com.dspl.malkey.valueObjects.*" 
		 xmlns:services="com.dspl.malkey.services.*"
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 enabled="{isEnable}"
		 width="100%" height="100%" 
		 disabledAlpha="1"
		 >
	 
	<!--View Tier-->
	
	
	<mx:Form width="417" height="345" x="12" y="10"
			 paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="2"
			 borderAlpha="0.10" borderColor="black" borderStyle="solid" borderVisible="true">
		<s:Label text="Indication of Damages" fontWeight="bold"/>
		
		<s:BorderContainer id="bcVehiDiagram" width="404" height="279" verticalCenter="0" horizontalCenter="0">
			<mx:Image 
				id="imgCI" 
				click="imgCI_clickHandler(event)" 
				width="402" height="277" 
				cacheAsBitmap="false" 
				source="{com_dspl_malkey_domain_Fvehicletype.image}"
				toolTip="{com_dspl_malkey_domain_Fvehicletype.image}"
				/>					
			<!--source="{com_dspl_malkey_domain_Fvehicletype.image}"-->
			
		</s:BorderContainer>
		
		<s:HGroup width="232" height="25">
			<s:ToggleButton id="btnDent" label="Dent"
							click="btnDent_clickHandler(event)" 
							enabled.stUndo="false" enabled.stNew="true" enabled.stEdit="true"/>
			<s:ToggleButton id="btnScratch" label="Scratch"
							click="btnScratch_clickHandler(event)" 
							enabled.stUndo="false" enabled.stNew="true" enabled.stEdit="true"/>
			<s:Button id="btnUndoMarking" label="Undo" 
					  click="btnUndoMarking_clickHandler(event)" 
					  enabled.stUndo="false" enabled.stNew="true" enabled.stEdit="true"/>
		</s:HGroup>
	</mx:Form>
	
	<mx:Form width="315" height="100"  borderAlpha="0.10" borderColor="black" x="10" y="358">
		<s:Label text="Check-Out Mileage" fontWeight="bold"/>
		<mx:SWFLoader id="slODOOrgMile" complete="slODOOrgMile_completeHandler(event)"  creationComplete="slODOOrgMile_creationCompleteHandler(event)" scaleContent="true" width="219" height="37" source="@Resource(key='odourl', bundle='resource')" autoLoad="true"/>
	</mx:Form>
	
	<mx:Form width="233" height="240" x="437" y="10"
			 paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="2"
			 borderAlpha="0.10" borderColor="black" borderStyle="solid" borderVisible="true">
		<s:Label text="Fuel Level" fontWeight="bold"/>
		<mx:SWFLoader id="slFuelMeter" creationComplete="slFuelMeter_creationCompleteHandler(event)" complete="slFuelMeter_completeHandler(event)" scaleContent="true" enabled="false" enabled.stNew="true" enabled.stEdit="true" width="220" height="210" source="@Resource(key='fuelurl', bundle='resource')"  autoLoad="true"/>
	</mx:Form>
	
	<mx:Form width="233" height="200" x="437" y="250"
			 paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="2"
			 borderAlpha="0.10" borderColor="black" borderStyle="solid" borderVisible="true">
		<s:Label text="Inventory" fontWeight="bold"/>
		

		<mx:List id="lstVehiInv" dataProvider="{acFvinventrylist}" labelField="description"
				 width="220" height="100%" alternatingItemColors="[#edf0fa, white]"
				 enabled.stUndo="false" enabled.stNew="true" enabled.stEdit="true"
				 itemClick="lstVehiInv_itemClickHandler(event)"
				 >
			<mx:itemRenderer>
				<fx:Component>
					<mx:CheckBox selected="{Boolean(data.isselected)}" 
								 change="checkbox1_changeHandler(event)">
						<fx:Script>
							<![CDATA[
								protected function checkbox1_changeHandler(event:Event):void
								{
									data.isselected = this.selected ? 1 : 0;
								}
							]]>
						</fx:Script>
					</mx:CheckBox>
					
				</fx:Component>
			</mx:itemRenderer>
			
		</mx:List>
		

		
	</mx:Form>
		
	<mx:Form width="233" height="290" x="678" y="10"
			 paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="2"
			 borderAlpha="0.10" borderColor="black" borderStyle="solid" borderVisible="true" 
			 toolTip="This Functionality Can Only Be Used For Longterm Hires"
			 enabled="{com_dspl_malkey_domain_Freservation.ratetype=='LONGTERM'}">
		<s:Label text="Generate Performer Invoice" fontWeight="bold"/>
		
		<s:Label text="Select Date Range for Invoice"/>
		<mx:FormItem label="From ">
			<mx:DateField width="100" 
						  id="dtDateStart" 
						  formatString="@Resource(key='dateFormat',bundle='resource')"
						  selectableRange="{{rangeStart : com_dspl_malkey_domain_Freservation.dout,rangeEnd : com_dspl_malkey_domain_Freservation.din}}"/>
		</mx:FormItem>
		<mx:FormItem label="To ">
		<mx:DateField width="100" id="dtDateEnd" formatString="@Resource(key='dateFormat',bundle='resource')" selectableRange="{{rangeStart : com_dspl_malkey_domain_Freservation.dout,rangeEnd : com_dspl_malkey_domain_Freservation.din}}"/>
		</mx:FormItem>
		<mx:FormItem label="Num.Days">
			<s:TextInput text="{DateOperation.getDaysDifference(dtDateEnd.selectedDate,dtDateStart.selectedDate)}" 
						 color="#3F36F9" 
						 contentBackgroundColor="#F1E776"
						 width="80"
						 editable="false"/>
		</mx:FormItem>		
		<s:Button id="btnPI" label="Generate" toolTip="Performer Invoice" click="btnPI_clickHandler(event)" x="847" y="60"/>
		<s:Label text="Enter Name Address Should be printed."/>
			<s:TextArea id="txtDebInfo" height="100" width="200"
						restrict="a-z A-z 0-9 \- _ @ ."/>
	</mx:Form>
	
	
	
	
	
	
	
	
	
	
	
	<!--STATES here-->
	<s:states>
		<s:State name="State1"   	id="State1"/>
		<s:State name="stDelete" 	id="stDelete"/>
		<s:State name="stEdit" 		id="stEdit"/>
		<s:State name="stNew"    	id="stNew"/>
		<s:State name="stView"  	id="stView"/>
		<s:State name="stUndo"  	id="stUndo"/>
	</s:states>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!--Bindings Here-->
	<fx:Binding source="{stCurrent}" destination="currentState"/>
	<fx:Binding source="genericFunctions.getArrayCollection(acVehicleAll,'regno',com_dspl_malkey_domain_Fresvehicle.id.regno) as Com_dspl_malkey_domain_Fvehicle" 				destination="com_dspl_malkey_domain_Fvehicle" />
	<fx:Binding source="genericFunctions.getArrayCollection(acVehicleTypeAll,'vehitypeid',com_dspl_malkey_domain_Fvehicle.vehitypeid) as Com_dspl_malkey_domain_Fvehicletype" 	destination="com_dspl_malkey_domain_Fvehicletype"/>
	
	
	
	
	<!--Metadata Here-->
	
	<fx:Metadata>
		[Event(name="load",type="flash.events.Event")]
	</fx:Metadata>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!--Controller-->
	<fx:Declarations>
		
		<fx:String id="stCurrent"/>
		
		<!--VALIDATORS-->
		
		<!--FORMATTERS HERE-->
		
		<!--VALUEOBJECTS/DOMAINS HERE-->
		<valueObjects:Com_dspl_malkey_domain_Freshed 	id="freshed"/>
		<valueObjects:Com_dspl_malkey_domain_Freservation 	id="com_dspl_malkey_domain_Freservation"/>
		<valueObjects:Com_dspl_malkey_domain_Fresvehicle 	id="com_dspl_malkey_domain_Fresvehicle"/>
		<valueObjects:Com_dspl_malkey_domain_FresvehiclePK 	id="com_dspl_malkey_domain_FresvehiclePK"/>
		<valueObjects:Com_dspl_malkey_domain_Fvehicle 		id="com_dspl_malkey_domain_Fvehicle"/>
		<valueObjects:Com_dspl_malkey_domain_Fvehicletype 	id="com_dspl_malkey_domain_Fvehicletype"/>
		<valueObjects:Com_dspl_malkey_domain_Fvehiclemake 	id="com_dspl_malkey_domain_Fvehiclemake"/>
		
		<!--ARRAYCOLLECTION HERE-->
		<mx:ArrayCollection id="acVehicleAll"/>
		<mx:ArrayCollection id="acVehicleMake"/>
		<mx:ArrayCollection id="acVehicleTypeAll"/>
		<mx:ArrayCollection id="acFvinventrylist"/>
		<mx:ArrayCollection id="acFresVehicleInventory"/>
		<mx:ArrayCollection id="acVehicleDamage"/>
		
		<!--CALLRESPONDERS HERE-->
		<!--<s:CallResponder id="crVehicleDamage" result="crVehicleDamage_resultHandler(event)"/>-->
		
		
		<!--SERVICES HERE-->
		<services:FvehicledamageSRV id="srvFvehicledamage"
									fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
									showBusyCursor="true"
									endpoint="@Resource(key='url',bundle='resource')"/>
<!--		<services:FvehicletypeSRV id="srvFvehicletype"
								  fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
								  showBusyCursor="true"
								  endpoint="@Resource(key='url',bundle='resource')"/>
		<services:FvinventrylistSRV id="srvFvinventrylist"
									fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
									showBusyCursor="true"
									endpoint="@Resource(key='url',bundle='resource')"/>-->
	
		
	</fx:Declarations>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!--Model:Bussiness Logic Here/ActionScript Here-->
	<fx:Script>
		<![CDATA[
			import com.dspl.efinac.components.common.utils.GenericFunctions;
			import com.dspl.malkey.components.odoPopup;
			import com.dspl.malkey.services.FreservationSRV;
			import com.dspl.malkey.util.DateOperation;
			import com.dspl.malkey.util.Message;
			import com.dspl.malkey.valueObjects.Com_dspl_malkey_domain_Faccessory;
			import com.dspl.malkey.valueObjects.Com_dspl_malkey_domain_Fdebtor;
			import com.dspl.malkey.valueObjects.Com_dspl_malkey_domain_Freshed;
			import com.dspl.malkey.valueObjects.Com_dspl_malkey_domain_Fresvehicledamage;
			import com.dspl.malkey.valueObjects.Com_dspl_malkey_domain_Fresvehinv;
			import com.dspl.malkey.valueObjects.Com_dspl_malkey_domain_FresvehinvPK;
			import com.dspl.malkey.valueObjects.Com_dspl_malkey_domain_Fvehicledamage;
			import com.dspl.malkey.valueObjects.Com_dspl_malkey_domain_Fvehicleinventry;
			import com.dspl.malkey.valueObjects.Com_dspl_malkey_domain_Fvinventrylist;
			
			import mx.controls.Alert;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.graphics.codec.JPEGEncoder;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			import mx.rpc.events.ResultEvent;
			
			
			private var vehicleModelImgLoader:Loader = new Loader();
			
			//Bindable variables Here
			[Bindable]private var genericFunctions:GenericFunctions=new GenericFunctions();	
			[Bindable]public var isEnable:Boolean=false;
			//non bindable variables Here
			private var CIchildCnt:int=1;
			private var size:uint         = 80;
			private var bgColor:uint      = 0xCCCCCC;
			private var bgColor1:uint     = 0x000000;
			private var borderColor:uint  = 0x666666;
			private var borderSize:uint   = 0;
			private var cornerRadius:uint = 9;
			private var gutter:uint       = 5;
			private var isCreatedlODOOrgMile:Boolean=false;
			private var isCreatedFuelMeter:Boolean=false;
			private var isLoaded:Boolean=false;
			

			
			
			
			//------------Reset Method-----------------------------------------------------------------------------------------------
			/***
			 * Reset all form (fuel level/inventory/indication of damage)
			 * 
			 * */
			public function resetAll():void
			{
				btnDent.selected=false;
				btnScratch.selected=false;
				isEnable=false;
				resetInventory();
				com_dspl_malkey_domain_Fvehicle=new Com_dspl_malkey_domain_Fvehicle();
				removeAllCI();
				try{
					if(isCreatedlODOOrgMile){setODOOrgMile("0");}
					if(isCreatedFuelMeter){setFuelLevel("0");}
				}
				catch(e:Error)
				{} 
			}
			//-----------------------------------------------------------------------------------------------------------
			
			
			
			
			//-----------------------------------------------------------------------------------------------------------
			public function addImageEventListerner():void
			{
				//Alert.show("adddevent lisrterner");
				isLoaded=false;
				var lilNicImgLoader:Loader=new Loader();
				lilNicImgLoader.cacheAsBitmap=false;
				lilNicImgLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onNicImageReady);
				lilNicImgLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
				lilNicImgLoader.load(new URLRequest(com_dspl_malkey_domain_Fvehicletype.image));
				//imgCI.addEventListener(Event.COMPLETE,onNicImageReady2,false);
			}
			//-----------------------------------------------------------------------------------------------------------
			
			
			
			//-----------------------------------------------------------------------------------------------------------
			public function onNicImageReady(event:Event):void {
				//Alert.show("before----fire");
				cursorManager.setBusyCursor();
				try{
					var img:Bitmap = new Bitmap();
					img.smoothing = true;
					img.cacheAsBitmap=false;
					img.bitmapData = event.target.content.bitmapData;
					//imgCI.source=img; //change the source of the image
					isLoaded=true;
					dispatchEvent(new Event("load")); 
					//Alert.show("URL:"+com_dspl_malkey_domain_Fvehicletype.image);
				}catch(error:Error){
					//Message.displayAlert(1,"onNicImageReady: " + error.message,"Error",errorCloseHandler);
				}
				cursorManager.removeBusyCursor();
				
			}
			
			function ioErrorHandler(event:IOErrorEvent):void {
				trace("ioErrorHandler: " + event);
			}
			
			//-----------------------------------------------------------------------------------------------------------
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			//-----------------Vehicle damage------------------------------------------------------------------------------------------
			public function set setVehicleDamage(ac:ArrayCollection):void
			{
				
 				acVehicleDamage=ac;
  				removeAllCI();
				drawDamages();
				
			//	vehicleModelImgLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onVehicleModelImageReady);
				/* vehicleModelImgLoader.load(new URLRequest(com_dspl_malkey_domain_Fvehicletype.image)); */
				
			}
			
			public function get getVehicleDamage():ArrayCollection
			{
				var acTemp:ArrayCollection=new ArrayCollection();
				for each(var loVehiDamage:Object in acVehicleDamage)
				{
					
					if(loVehiDamage is Com_dspl_malkey_domain_Fvehicledamage)
					{
						acTemp.addItem(loVehiDamage);
					}
					if(loVehiDamage is Com_dspl_malkey_domain_Fresvehicledamage)
					{
						if(loVehiDamage.ioflag==1){
							var x:Com_dspl_malkey_domain_Fvehicledamage =new Com_dspl_malkey_domain_Fvehicledamage();
							x.damagetype=loVehiDamage.damagetype;
							x.regno=com_dspl_malkey_domain_FresvehiclePK.regno;
							x.xvalue=loVehiDamage.xvalue;
							x.yvalue=loVehiDamage.yvalue;
							acTemp.addItem(x);
						}
					}
				}

				return acTemp;
				//return acVehicleDamage;
			}
			
			
			
			
			//drawing methods
			
			
			protected function imgCI_clickHandler(event:MouseEvent):void
			{
				if (currentState.toUpperCase() == "STNEW" || currentState.toUpperCase() == "STEDIT"){
					var lnDamageType:int;
					if(btnDent.selected==true){
						lnDamageType = 1;
					} else if(btnScratch.selected==true){
						lnDamageType = 2;
					} else {
						return;
					}
					
					var lnXValue:Number = imgCI.mouseX;
					var lnYValue:Number = imgCI.mouseY;
					var lnChildCount:int = CIchildCnt;			// Store the current value since the "CIchildCnt" would be incremented within doDrawRectCI() method 
					doDrawRectCI(lnXValue,lnYValue,lnDamageType);
					
					// Update the relational table with the damage info
					var loVehiDamage:Com_dspl_malkey_domain_Fvehicledamage = new Com_dspl_malkey_domain_Fvehicledamage();
					loVehiDamage.regno = com_dspl_malkey_domain_FresvehiclePK.regno;
					loVehiDamage.xvalue = lnXValue.toString();
					loVehiDamage.yvalue = lnYValue.toString();
					loVehiDamage.damagetype = lnDamageType;
					loVehiDamage.seq = lnChildCount;
					loVehiDamage.recordid = 0;
					acVehicleDamage.addItem(loVehiDamage);
				}
			}	
			
			
			
			
			private function doDrawRectCI(lx:Number,ly:Number,type:int):void {
				try
				{
					var loChild:Shape = new Shape();
					if(type==1){
						loChild.graphics.beginFill(bgColor);
					} else if(type==2){
						loChild.graphics.beginFill(bgColor1);
					}
					
					loChild.graphics.lineStyle(borderSize, borderColor);
					loChild.graphics.drawRect(lx, ly, 10, 10);
					loChild.graphics.endFill();
					imgCI.addChild(loChild);
					CIchildCnt += 1;
				}
				catch(error:Error)
				{
					Alert.show("doDrawRect: " + error.message);
				}
			}
			
			/***
			 * Button click handlers here
			 * 
			 * */
			public function drawDamages():void
			{
				//removeAllCI();
			//	Alert.show("CIchildCnt:"+CIchildCnt);
				for each(var loVehiDamage:Object in acVehicleDamage)
				{
					try
					{
							if(loVehiDamage is Com_dspl_malkey_domain_Fvehicledamage)
							{
								doDrawRectCI(loVehiDamage.xvalue,loVehiDamage.yvalue,loVehiDamage.damagetype);
							}
							if(loVehiDamage is Com_dspl_malkey_domain_Fresvehicledamage)
							{
								if(loVehiDamage['ioflag']==1)
								{
								//	trace("reach here xvalue :"+loVehiDamage.xvalue);
									doDrawRectCI(loVehiDamage.xvalue,loVehiDamage.yvalue,loVehiDamage.damagetype);
								}
							}
					}
					catch(e:Error)
					{
							trace("while retriving the propoerty.\n"+e.message);
					}
				}
			}

			
			protected function btnDent_clickHandler(event:MouseEvent):void
			{
				btnScratch.selected=false;
			}
			
			
			protected function btnScratch_clickHandler(event:MouseEvent):void
			{
				btnDent.selected=false;
			}
			
			protected function btnUndoMarking_clickHandler(event:MouseEvent):void
			{
				undoCI();	
			}
			
			private function undoCI():void
			{
				if(CIchildCnt>1){
					CIchildCnt -= 1;
					imgCI.removeChildAt(CIchildCnt);
					acVehicleDamage.removeItemAt(CIchildCnt-1);		// Since the array collection is zero based, reduce one
				}
			}
			
			// Remove all the existing damage marks and set the counter to zero
			private function removeAllCI():void{
				try{
					if (CIchildCnt>1){
						CIchildCnt -= 1;
						for (var lnCount:int = CIchildCnt ; lnCount > 0 ; lnCount--)
							imgCI.removeChildAt(lnCount);
						
						CIchildCnt = 1
					}
				}
				catch(e:Error)
				{}

			}  
			// End: Vehicle Damage Marking	
			//----------------END---VEHICLE DAMAGE-------------------------------------------------------------------------------------------
			
			
		
			
			
			
			
			
			
			//---------------START INVENTORY--------------------------------------------------------------------------------------------
			//Start :Inventory reset and setselect methods are belloow
			public function setSelectedInventory():void
			{
				resetInventory();
				setInventory();
			}
			
			//Start :Inventory reset and setselect methods are belloow
			private function setInventory():void
			{
				
				for(var index:int =0 ; index<acFresVehicleInventory.length;index++)
				{
					for(var index2:int =0 ; index2<acFvinventrylist.length;index2++){
						var tempResinv:Com_dspl_malkey_domain_Fresvehinv=acFresVehicleInventory.getItemAt(index) as Com_dspl_malkey_domain_Fresvehinv;
						var tempInventory:Com_dspl_malkey_domain_Fvinventrylist=acFvinventrylist.getItemAt(index2) as Com_dspl_malkey_domain_Fvinventrylist;
						if(tempResinv.id.invid==tempInventory.invid  && tempResinv.checkout==1)
						{
							tempInventory.isselected=1;							
						}
					}
				}
				lstVehiInv.invalidateDisplayList();
				lstVehiInv.invalidateList();
				//wakeup();
			}
			

			/***
			 * Reset the list
			 * set all are unselect
			 * un check all
			 * */
			private function resetInventory():void
			{
				
				for each (var tempInventory:Com_dspl_malkey_domain_Fvinventrylist in  acFvinventrylist)
				{
					tempInventory.isselected=0;
				}			
				lstVehiInv.invalidateDisplayList();
				lstVehiInv.invalidateList();
				//wakeup();
			}
			
			/***
			 * set the selected value as fresvehicleInvetory object and put in to paticular resvehicle object
			 * 
			 * 
			 * */
		//	[Bindable("inventoryChange")]
			public function getSelectedInventory():ArrayCollection
			{
					var acFresVehicleInventory:ArrayCollection =new ArrayCollection();
					for each(var tempInventory:Com_dspl_malkey_domain_Fvinventrylist in acFvinventrylist)
					{
						
						if(tempInventory.isselected==1)
						{
							tempInventory.isselected=1;
							var tempResinv:Com_dspl_malkey_domain_Fresvehinv=new Com_dspl_malkey_domain_Fresvehinv();
							var tempResinvPK:Com_dspl_malkey_domain_FresvehinvPK=new Com_dspl_malkey_domain_FresvehinvPK();
							tempResinvPK.invid=tempInventory.invid;
							tempResinvPK.regno=com_dspl_malkey_domain_Fresvehicle.id.regno;
							tempResinvPK.resno=com_dspl_malkey_domain_Freservation.resno;
							tempResinv.id=tempResinvPK;
							tempResinv.checkout=1;
							acFresVehicleInventory.addItem(tempResinv);
						}
					}
					//follwoing line was not working there for manually set the list before call save method in trReservation
					//com_dspl_malkey_domain_Fresvehicle.lstFresvehinv=acFresVehicleInventory;//sety the values to resvehicle object in vehicle details tab
					return acFresVehicleInventory;
			}
			
			//End :inventory
			
			
			/***
			 * This method dispatch the ratechnage event &
			 *  wakeup for getSelectedInventory
			 * 
			 * */
/* 			public function wakeup():void
			{
				dispatchEvent(new Event("inventoryChange"));
			} */
			

			/***
			 * Inventory item click invent
			 * wakeup() method force to create resVehcleInventory object and put int resvehicle object
			 * 
			 * */
			protected function lstVehiInv_itemClickHandler(event:ListEvent):void
			{
				//wakeup();
			}
			
			
			
			
			
			public function set setVehicleInventory(ac:ArrayCollection):void
			{
				trace("set setVehicleInventory");
				acFresVehicleInventory=ac;
				setSelectedInventory();
			}
			
			public function get getVehicleInventory():ArrayCollection
			{
				return acFresVehicleInventory;
			}
			
			
			
			//---------END INVENTORY--------------------------------------------------------------------------------------------------


			
			
			
			
			
			
			
			
			


			
			public function onVehicleModelImageReady(event:Event):void 
			{
				cursorManager.setBusyCursor();
				try{
					var img:Bitmap = new Bitmap();
					var encoder:JPEGEncoder = new JPEGEncoder();
					var imgBArray:ByteArray;
					img.smoothing = true;
					img.bitmapData = event.target.content.bitmapData;
					imgCI.source=img;
				}catch(error:Error){
				}				
				cursorManager.removeBusyCursor();
			}
			//-----------------------------------------------------------------------------------------------------------





			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			//-----------------------------------------------------------------------------------------------------------
			/***
			 * set vehicle status fuel level and millage
			 * 
			 * 
			 * */
			public function setVehicleStatus():void
			{
				setFuelLevel(com_dspl_malkey_domain_Freservation.cofuellevel.toString());
				setODOOrgMile(com_dspl_malkey_domain_Freservation.comileage.toString());
			}
			//-----------------------------------------------------------------------------------------------------------
			
			
			
			
			
			
			
			
			
			
			
			
			//-----------------------------------------------------------------------------------------------------------	
			// Start: Fuel Meter
			protected function setFuelLevel(level:String):void
			{ 
				try{
					if(isCreatedFuelMeter){
						var loaderManager:Object = slFuelMeter.content as Object;
						loaderManager.setFuelLevel(level);
					}
				}
				catch(e:Error)
				{
					Alert.show("error in loading swf Fuel meeter");
				}
			}
			
			protected function setFuelMeterEnabled(lEnabled:Boolean):void
			{
				try{
					var loaderManager:Object = slFuelMeter.content as Object;
					loaderManager.setEnable(lEnabled);
				}
				catch(e:Error)
				{}
			}
			
			public function getCurrentFuelMeterLevel():int
			{
				
				try{
					var loaderManager:Object = slFuelMeter.content as Object;
					return loaderManager.getCurrentLevel();
				}
				catch(e:Error)
				{}
				return 0;
			}
			
			/***
			 * Following method fire when swf is loaded to content
			 * After that set vehicle status method called
			 * */
			protected function slFuelMeter_completeHandler(event:Event):void
			{
				isCreatedFuelMeter=true;
				setVehicleStatus();
			}
			
			
			
			protected function slFuelMeter_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				try
				{
					slFuelMeter.addEventListener(Event.COMPLETE,sloader0Loaded,false,0,false);
					slFuelMeter.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
					slFuelMeter.load(ResourceManager.getInstance().getString("resource","fuelurl"));
					//	slFuelMeter.load(@Resource(key='fuelurl', bundle='resource'));
					//sloader.load("http://sandaruwan:8400/efinac/efinac-client-debug/fuelmeter.swf");
					slFuelMeter.addEventListener("fuelMeterArm",fuelMeterArmHandler,false,0,false);
					
				}
				catch(error:Error)
				{
					Alert.show("sloader0: " + error.message);
				}
			}
			
			
			
			
			protected function sloader0_creationCompleteHandler(event:FlexEvent):void
			{
				try
				{
					slFuelMeter.addEventListener(Event.COMPLETE,sloader0Loaded,false,0,false);
					slFuelMeter.load(ResourceManager.getInstance().getString("resource","fuelurl"));
					//	slFuelMeter.load(@Resource(key='fuelurl', bundle='resource'));
					//sloader.load("http://sandaruwan:8400/efinac/efinac-client-debug/fuelmeter.swf");
					slFuelMeter.addEventListener("fuelMeterArm",fuelMeterArmHandler,false,0,false);
					
				}
				catch(error:Error)
				{
					Alert.show("sloader0: " + error.message);
				}
			}
			
			
			private function sloader0Loaded(e:Event):void
			{
				try
				{
					setVehicleStatus();
				}
				catch(error:Error)
				{
					Alert.show("sloader0Loaded: " + error.message);
				}
			}
			
			private function fuelMeterArmHandler(e:DataEvent):void
			{
				try
				{
					
					//Alert.show(e.data); 
				}
				catch(error:Error)
				{
					Alert.show(error.message);
				}
			}
			//-----------------------------------------------------------------------------------------------------------
			// End: Fuel Meter
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			//-----------------------------------------------------------------------------------------------------------
			// Start: ODO Meter - Original Mileage
			private function odoOrgrMileOnClick(e:DataEvent):void
			{
				if (currentState.toUpperCase() == "STNEW" || currentState.toUpperCase() == "STEDIT"){
					var pop:odoPopup = new odoPopup();
					pop.cMileage = e.data;
					pop.addEventListener("mileageChange",odoOrgMilePopupClose,false,0,false);
					PopUpManager.addPopUp(pop,this,true,null,null);
					PopUpManager.centerPopUp(pop);
				}
			}
			
			private function odoOrgMilePopupClose(e:DataEvent):void
			{
				if( int(e.data) >= com_dspl_malkey_domain_Fvehicle.curmileage)
				{
					setODOOrgMile(e.data);
					com_dspl_malkey_domain_Freservation.comileage = int(e.data);
				}
				else
				{
					Alert.show("Invalid data.\nCheck-out mileage should be greater-than or equal current mileage.","Warning",Alert.OK,null,null,genericFunctions.IconWarning,Alert.OK,null);
				}
				
			}
			
			private function setODOOrgMile(value:String):void
			{
				if(isCreatedlODOOrgMile){
					var loaderManager:Object = slODOOrgMile.content as Object;
					loaderManager.setOdoMeter(value);
				}
			}
			
			/***
			 * Following method fire when swf is loaded to content
			 * 
			 * */
			protected function slODOOrgMile_completeHandler(event:Event):void
			{
				isCreatedlODOOrgMile=true;
				setVehicleStatus();
			}
			
			
			protected function slODOOrgMile_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				slODOOrgMile.addEventListener("ODOClick",odoOrgrMileOnClick,false,0,false);
				
			}
			
			//-----------------------------------------------------------------------------------------------------------
			// End: ODO Meter - Original Mileage
			
			
			protected function btnPI_clickHandler(event:MouseEvent):void
			{
				if(dtDateStart.selectedDate!=null && dtDateEnd.selectedDate !=null){
					// TODO Auto-generated method stub
					var pObj:InvoicePerformer = new InvoicePerformer();
					pObj["gsTransCode"]="T007";
					pObj.selectableRangeAC={rangeStart : com_dspl_malkey_domain_Freservation.dout,rangeEnd : com_dspl_malkey_domain_Freservation.din};
					PopUpManager.addPopUp(pObj,this,true);
					PopUpManager.centerPopUp(pObj);
					pObj.freshed=freshed;
					pObj.callServerAgreement(com_dspl_malkey_domain_Freservation.agrno,txtDebInfo.text,dtDateStart.selectedDate,dtDateEnd.selectedDate);
				}
				else
				{
					Message.displayAlert(1,"Please Select Date Range","Error",null);
				}
			}
			

			

			

			


/* 			protected function btnNextDateRange_clickHandler(event:MouseEvent):void
			{
				if(dtDateStart.selectedDate==null){
					dtDateStart.selectedDate=com_dspl_malkey_domain_Freservation.dout;
				}
				
				var fromdate:Date =dtDateStart.selectedDate;
				if(com_dspl_malkey_domain_Freservation.billbasis=="MONTHLY")
				{
					fromdate.setMonth(fromdate.getMonth()+1);
				}
				if(com_dspl_malkey_domain_Freservation.billbasis=="QUARTALY")
				{
					fromdate.setMonth(fromdate.getMonth()+3);
				}
				dtDateStart.selectedDate=fromdate;
			}


			protected function dtDateStart_changeHandler(event:CalendarLayoutChangeEvent):void
			{
				if(dtDateEnd.selectedDate==null){
					
					var fromdate:Date =dtDateStart.selectedDate;
					if(com_dspl_malkey_domain_Freservation.billbasis=="MONTHLY")
					{
						fromdate.setMonth(fromdate.getMonth()+1);
					}
					if(com_dspl_malkey_domain_Freservation.billbasis=="QUARTALY")
					{
						fromdate.setMonth(fromdate.getMonth()+3);
					}
					dtDateEnd.selectedDate=fromdate;
				}
			} */

		]]>
	</fx:Script>
	
</s:Group>

